//string.zh
//ZScript string handling functions, akin to those found in C

//Constants
//The 'NULL' string pointer
const int NULL					= -1;	// (as 0 is a valid pointer)

//printf, sprintf and strcatf arguments
const int MSGC_LINEFEED			= 10;	// '\n'

const int MF_NONE				= 0;	// '%n'
const int MF_STRING				= 1;	// '%s'
const int MF_INT				= 2;	// '%i'
const int MF_FLOAT				= 3;	// '%f'
const int MF_NUM				= 4;	// '%d'
const int MF_PTR				= 5;	// '%p'
const int MF_CHAR				= 6;	// '%c'


//Single character functions
//Returns true if 'chr' is in the control code range of ascii characters
bool isControlCode(int chr){
	return (chr >= 0 && chr < ' ');
}

//Returns true if 'chr' is in the range of ascii characters '0' to '9'
bool isNumber(int chr){
	return (chr >= '0' && chr <= '9');
}

//Returns true if 'chr' is an alphabetic character
bool isAlphabetic(int chr){
	return (chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z');
}

//Returns true if 'chr' is an alphanumeric character
bool isAlphaNumeric(int chr){
	return isNumber(chr) || isAlphabetic(chr);
}

//Returns true if 'chr' is in the set { '0'-'9', 'A'-'F' , 'a'-'f' }
bool isHex(int chr){
	return isNumber(chr) || (chr >= 'A' && chr <= 'F') || (chr >= 'a' && chr <= 'f');
}

//Returns true if 'chr' is an upper-case character
bool isUpperCase(int chr){
	return (chr >= 'A' && chr <= 'Z');
}

//Returns true if 'chr' is a lower-case character
bool isLowerCase(int chr){
	return (chr >= 'a' && chr <= 'z');
}

//Converts all upper case characters to lower case, leaving non-alphabetic
//characters unchanged
int UpperToLower(int chr){
	if(!isAlphabetic(chr)) return chr;
	return Cond(isLowerCase(chr),chr,chr+('a'-'A'));
}

//Converts all lower case characters to upper case, leaving non-alphabetic
//characters unchanged
int LowerToUpper(int chr){
	if(!isAlphabetic(chr)) return chr;
	return Cond(isLowerCase(chr),chr-('a'-'A'),chr);
}

//Converts lower case to upper case and upper case to lower case
int ConvertCase(int chr){
	if(!isAlphabetic(chr)) return chr;
	return chr + Cond(isLowerCase(chr),'A'-'a','a'-'A');
}


//Memory Manipulation
//Memory Set
//Sets block of memory of size 'n' pointed by 'ptr' to 'value'
void memset(int ptr, int value, int n){
	for(int i=0;i<n;i++) ptr[i] = value;
}

//Memory Copy
//Copys block of memory pointed by 'src' of size 'n' to 'dest' and returns
//'dest'
int memcpy(int dest, int src, int n){
	for(int i=0;i<n;i++) dest[i] = src[i];
	return dest;
}

//Memory Move
//As memcpy, but uses a buffer so memory space can overlap
int memmove(int dest, int src, int n){
	int buffer[0x100];
	for(int i=0;i<n;i++) buffer[i] = src[i];
	for(int i=0;i<n;i++) dest[i] = buffer[i];
	return dest;
}

//Array Set
//Assign all elements of array. Overloaded.
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
                    int a8,int a9,int aa,int ab,int ac,int ad,int ae,int af){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9; a[0xa] = aa; a[0xb] = ab; a[0xc] = ac; a[0xd] = ad; a[0xe] = ae; a[0xf] = af;
}


//String Manipulation
//String Copy
//Copys string 'src' into string 'dest' without checking for overflow in 'dest'
void strcpy(int dest, int src){
	for(int i=0;src[i]!=0;i++) dest[i] = src[i];
}

//As strcpy, but only takes the first 'n' characters from src
void strncpy(int dest, int src, int n){
	for(int i=0;src[i]!=0 && i<n;i++) dest[i] = src[i];
}

//Remove Characters
//Remove all characters starting from pointer 'string'
void remchr(int string){
	for(int i=0;string[i]!=0;i++) string[i] = 0;
}

//Remove 'n' characters and shift string back to pointer 'string'
void remnchr(int string, int n){
	int l = strlen(string);
	for(int i=0;string[i]!=0;i++) string[i] = Cond(i+n<l,string[i+n],0);
}

//String Length
//Returns the length of string 'string'
int strlen(int string){
	int l;
	for(l=0;string[l]!=0;l++);
	return l;
}

//String Concatenate
//Appends string 'src' onto string 'dest' (assuming dest has enough extra memory
//allocated to allow the operation)
int strcat(int dest, int src){
	int i; int l = strlen(dest);
	for(i=0;src[i]!=0;i++) dest[l+i] = src[i];
	dest[l+i] = 0;
	return dest;
}

//strcat up to 'n' characters in src
int strncat(int dest, int src, int n){
	int i; int l = strlen(dest);
	for(i=0;src[i]!=0 && i<n;i++) dest[l+i] = src[i];
	dest[l+i] = 0;
	return dest;
}


//String Searching
//String Character
//Returns a pointer to the first occurence of 'character' in 'string',
//or NULL if none are found
int strchr(int string, int character){
	for(int i=0;string[i]!=0;i++)
		if(string[i] == character) return PointerOffset(string,i);
	return NULL;
}

//String Reverse Character
//Returns a pointer to the first occurence of 'character' in 'string'
//starting from the end, or NULL if none are found
int strrchr(int string, int character){
	for(int i=strlen(string);i>0;i--)
		if(string[i] == character) return PointerOffset(string,i);
	return NULL;
}

//String Sub-String
//Returns a pointer to the first occurence of sub-string 'sub' in 'string,
//or NULL if sub is not found
int strstr(int string, int sub){
	int l = strlen(sub)-1;
	for(int i=0;string[i]!=0;i++)
		for(int j=0;sub[j]!=0 && string[i+j]!=0 && string[i+j] == sub[j];j++)
			if(j == l) return PointerOffset(string,i);
	return NULL;
}

//String Span
//Returns the length of characters in 'str' before a character not contained in
//'keys' is found
int strspn(int str, int keys){
	int i;
	for(i=0;str[i]!=0;i++){
		bool found = false;
		for(int j=0;keys[j]!=0;j++) if(str[i] == keys[j]) found = true;
		if(!found) return i;
	}
	return i;
}

//String Complement Span
//Returns the length of characters in 'str' before a character contained in
//'keys' is found
int strcspn(int str, int keys){
	int i;
	for(i=0;str[i]!=0;i++)
		for(int j=0;keys[j]!=0;j++)
			if(str[i] == keys[j]) return i;
	return i;
}

//String Pointer Break
//Returns a pointer to the first occurence of any of the characters in 'keys'
//in 'str', or NULL if none of the characters of 'keys' are found in str
int strpbrk(int str, int keys){
	for(int i=0;str[i]!=0;i++)
		for(int j=0;keys[j]!=0;j++)
			if(str[i] == keys[j]) return PointerOffset(str,i);
	return NULL;
}


//String Comparison
//String Compare
//Iterates through str1 and str2 until a character is found which is not the same in
//both strings, and then returns > 0 if the character is larger in str1, and < 0 if it is
//larger in str2. Returns 0 if the strings are equal
int strcmp(int str1, int str2){
	int i;
	for(i=0;str1[i]!=0 && str2[i]!=0 && str1[i]==str2[i];i++);
	return str1[i]-str2[i];
}

//strcmp up to 'n' characters
int strncmp(int str1, int str2, int n){
	int i;
	for(i=0;str1[i]!=0 && str2[i]!=0 && str1[i]==str2[i] && i<n;i++);
	if(i == n) i--;
	return str1[i]-str2[i];
}


//Converting between variables and strings
//ASCII to Integer
//Returns the decimal integer pointed by 'string'
int atoi(int string){
	int i=0; bool neg = false;
	if(string[i] == '-'){
		i++;
		neg = true;
	}
	int ret = 0;
	for(;isNumber(string[i]);i++) ret = ret*10 + (string[i]-'0');
	return ret*Cond(neg,-1,1);
}

//Integer Length
//Returns the length of characters of the decimal integer pointed by 'string'
int ilen(int string){
	int ret = 0;
	if(string[0] == '-') ret++;
	for(;isNumber(string[ret]);ret++);
	return ret;
}

//Hexadecimal ASCII to Integer
//Returns the (positive) hexadecimal integer pointed by 'string'
int xtoi(int string){
	int ret = 0;
	for(int i=0;isHex(string[i]);i++)
		ret = ret*0x10 + Cond(isNumber(string[i]),string[i]-'0',LowerToUpper(string[i])-'A'+0xA);
	return ret;
}

//Hexadecimal Length
//Returns the length of characters of the (positive) hexadecimal integer pointed by 'string'
int xlen(int string){
	int ret = 0;
	for(;isHex(string[ret]);ret++);
	return ret;
}

//ASCII to Float
//Returns the floating point number pointed by 'string'
float atof(int string){
	int i = 0; bool neg = false;
	if(string[i] == '-'){
		i++;
		neg = true;
	}
	int ret = 0;
	for(;isNumber(string[i]);i++) ret = ret*10 + (string[i]-'0');
	i++;
	int decimal = 0;
	for(int j=0;j<4;j++) decimal = decimal*10 + Cond(isNumber(string[i+j]),(string[i+j]-'0'),0);
	return (ret+decimal/10000)*Cond(neg,-1,1);
}

//Float Length
//Returns the length of characters of the floating point number pointed by 'string'
int flen(int string){
	int ret = ilen(string);
	ret++;
	return ret+ilen(PointerOffset(string,ret));
}

//ASCII to Number
//Calls either atoi or atof depending on context
int aton(int string){
	int i = 0;
	if(string[i] == '-') i++;
	for(;isNumber(string[i]);i++);

	if(string[i] == '.') return atof(string);
	else return atoi(string);
}

//Number Length
//Calls either flen or ilen depending on context
int nlen(int string){
	int i = 0;
	if(string[i] == '-') i++;
	for(;isNumber(string[i]);i++);

	if(string[i] == '.') return flen(string);
	else return ilen(string);
}

//Integer to ASCII
//Places integer 'num' into string 'string' without checking for overflow,
//and returns the number of characters used
int itoa(int string, int num){
	int ret = 0;
	if(num < 0){
		string[0] = '-';
		ret++;
		num = -num;
	}else if(num == 0){
		string[0] = '0';
		return 1;
	}
	int digits = Floor(Log10(num)+1);
	for(int i=0;i<digits;i++) string[ret+i] = Floor(num/Pow(10,digits-i-1))%10 + '0';
	return ret+digits;
}

//Float to ASCII
//Places float 'num' into string 'string' without checking for overflow,
//and returns the number of characters used. If 'printall' is true, it will add 4 decimal places
//regardless of the most significant digit
int ftoa(int string, float num, bool printall){
	int ret = 0;
	if(num < 0){
		string[0] = '-'; ret++;
		num = -num;
	}

	int decimal = (num-Floor(num))*10000;
	num = Floor(num);
	if(num == 0){
		string[ret] = '0';
		ret++;
	}else{
		int digits = Floor(Log10(num)+1);
		for(int i=0;i<digits;i++) string[ret+i] = Floor(num/Pow(10,digits-i-1))%10 + '0';
		ret += digits;
	}

	string[ret] = '.'; ret++;
	if(decimal == 0){
		int digits = Cond(printall,4,1);
		for(int i=0;i<digits;i++) string[ret+i] = '0';
		ret += digits;
	}else{
		if(!printall) while(decimal%10 == 0) decimal /= 10;
		int digits = Floor(Log10(decimal)+1);
		for(int i=0;i<digits;i++) string[ret+i] = Floor(decimal/Pow(10,digits-i-1))%10 + '0';
		ret += digits;
	}
	return ret;
}

//Number to ASCII
//Checks whether 'num' is an integer or not, and calls the appropriate function
int ntoa(int string, float num){
	if(num == Floor(num)) return itoa(string,num);
	else return ftoa(string,num,false);
}


//String Formating
//String Concatenate Format
//Appends 'arg' onto 'dest' as the MF_ constant passed into 'format'
int strcatf(int dest, int arg, int format){
	if(format == MF_INT){
		int buffer[0x20];
		itoa(buffer,arg);
		strcat(dest,buffer);
	}else if(format == MF_FLOAT){
		int buffer[0x20];
		ftoa(buffer,arg,false);
		strcat(dest,buffer);
	}else if(format == MF_NUM){
		int buffer[0x20];
		ntoa(buffer,arg);
		strcat(dest,buffer);
	}else if(format == MF_PTR){
		int buffer[0x20];
		itoa(buffer,(arg-Floor(arg))*10000);
		strcat(dest,buffer);
	}else if(format == MF_CHAR){
		int buffer[2];
		arrayset(buffer,arg,0);
		strcat(dest,buffer);
	}else if(format == MF_STRING) strcat(dest,arg);
	return dest;
}

//As strcatf, using only 'n' characters of 'arg'
int strncatf(int dest, int arg, int format, int n){
	if(format == MF_INT){
		int buffer[0x20];
		itoa(buffer,arg);
		strncat(dest,buffer,n);
	}else if(format == MF_FLOAT){
		int buffer[0x20];
		ftoa(buffer,arg,false);
		strncat(dest,buffer,n);
	}else if(format == MF_NUM){
		int buffer[0x20];
		ntoa(buffer,arg);
		strncat(dest,buffer,n);
	}else if(format == MF_PTR){
		int buffer[0x20];
		itoa(buffer,(arg*10000)&0xFFFF);
		strncat(dest,buffer,n);
	}else if(format == MF_CHAR){
		int buffer[2];
		arrayset(buffer,arg,0);
		strcat(dest,buffer);
	}else if(format == MF_STRING) strcat(dest,arg);
	return dest;
}

//String Print Format
//Prints string 'formatstr' into 'ret' according to the arguments inputted (see C++ function for reference)
//Maximum 16 arguments
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8,int a9,int aa,int ab,int ac,int ad,int ae,int af){
	int pos = 0; int currentarg = 0; int a[0x10];
	arrayset(a,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af);

	for(int i=0;formatstr[i]!=0;i++){
		int chr = formatstr[i];
		if(chr == '\'){ //Control code
			int nextchr = formatstr[i+1];
			if(nextchr == 'n'){
				ret[pos] = MSGC_LINEFEED; pos++;
				i++; continue;
			}
		}
		else if(chr == '%'){ //Format argument
			int nextchr = formatstr[i+1];
			if(sprintf_isMFCode(nextchr)){
				strcatf(ret,a[currentarg],sprintf_MFCodeToInt(nextchr));
				for(;ret[pos]!=0;pos++);
				currentarg++;
				i++; continue;
			}
		}

		ret[pos] = chr; pos++;
	}
	return pos;
}

//Print Format
//Uses a buffer to print the results of sprintf(formatstr,...) straight to allegro.log
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9,int aa,int ab,int ac,int ad,int ae,int af){
	int buffer[0x200]; //Max TraceS length is 512
	sprintf(buffer,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af);
	TraceS(buffer);
}

//Used by sprintf
bool sprintf_isMFCode(int chr){
	return (chr == 'n' || chr == 's' || chr == 'i' || chr == 'f' || chr == 'd' || chr == 'p' || chr == 'c');
}
int sprintf_MFCodeToInt(int chr){
	if(chr == 'n') return MF_NONE;
	else if(chr == 'i') return MF_INT;
	else if(chr == 'f') return MF_FLOAT;
	else if(chr == 'd') return MF_NUM;
	else if(chr == 's') return MF_STRING;
	else if(chr == 'p') return MF_PTR;
	else if(chr == 'c') return MF_CHAR;
	return -1;
}


//Function overloads
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8,int a9,int aa,int ab,int ac,int ad,int ae){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8,int a9,int aa,int ab,int ac,int ad){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8,int a9,int aa,int ab){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8,int a9,int aa){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8,int a9){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
								   int a8){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,a7,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,a6,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4,int a5){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,a5,0,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3,int a4){
	return sprintf(ret,formatstr,a0,a1,a2,a3,a4,0,0,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2,int a3){
	return sprintf(ret,formatstr,a0,a1,a2,a3,0,0,0,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1,int a2){
	return sprintf(ret,formatstr,a0,a1,a2,0,0,0,0,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0,int a1){
	return sprintf(ret,formatstr,a0,a1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr,int a0){
	return sprintf(ret,formatstr,a0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
}
int sprintf(int ret,int formatstr){
	return sprintf(ret,formatstr,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
}

void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9,int aa,int ab,int ac,int ad,int ae){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9,int aa,int ab,int ac,int ad){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9,int aa,int ab,int ac){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9,int aa,int ab){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9,int aa){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8,int a9){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
						  int a8){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,a8,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,a7,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5,int a6){
	printf(formatstr,a0,a1,a2,a3,a4,a5,a6,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4,int a5){
	printf(formatstr,a0,a1,a2,a3,a4,a5,0,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3,int a4){
	printf(formatstr,a0,a1,a2,a3,a4,0,0,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2,int a3){
	printf(formatstr,a0,a1,a2,a3,0,0,0,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1,int a2){
	printf(formatstr,a0,a1,a2,0,0,0,0,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0,int a1){
	printf(formatstr,a0,a1,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr,int a0){
	printf(formatstr,a0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
}
void printf(int formatstr){
	printf(formatstr,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
}

void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8,int a9,int aa,int ab, int ac, int ad, int ae){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9; a[0xa] = aa; a[0xb] = ab; a[0xc] = ac; a[0xd] = ad; a[0xe] = ae;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8,int a9,int aa,int ab, int ac, int ad){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9; a[0xa] = aa; a[0xb] = ab; a[0xc] = ac; a[0xd] = ad;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8,int a9,int aa,int ab, int ac){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9; a[0xa] = aa; a[0xb] = ab; a[0xc] = ac;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8,int a9,int aa,int ab){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9; a[0xa] = aa; a[0xb] = ab;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8,int a9,int aa){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9; a[0xa] = aa;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8,int a9){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8; a[0x9] = a9;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7,
				int a8){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
	a[0x8] = a8;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6,int a7){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6; a[0x7] = a7;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5,int a6){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5; a[0x6] = a6;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4,int a5){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4; a[0x5] = a5;
}
void arrayset(int a,int a0,int a1,int a2,int a3,int a4){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3; a[0x4] = a4;
}
void arrayset(int a,int a0,int a1,int a2,int a3){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2; a[0x3] = a3;
}
void arrayset(int a,int a0,int a1,int a2){
	a[0x0] = a0; a[0x1] = a1; a[0x2] = a2;
}
void arrayset(int a,int a0,int a1){
	a[0x0] = a0; a[0x1] = a1;
}
void arrayset(int a,int a0){
	a[0x0] = a0;
}
